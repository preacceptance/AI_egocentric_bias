# if importing from Qualtrics: (i) export data as numeric values, and (ii) delete rows 2 and 3 of the .csv file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d_raw <- read.csv('AI_Curse_v4.csv')
## number of participants BEFORE exclusions:
n_original <- dim(d_raw)[1] # extracting number of rows only, not columns
n_original
## perform attention exclusions:
d_raw <- subset(d_raw, ( d_raw$attn_1 == 1 & d_raw$attn_2 == 2))
dim(d_raw) # number of participants should decrease after comprehension exclusions
## get number of participants AFTER exclusions:
n_final <- dim(d_raw)[1]; n_final # extracting number of rows only, not columns
percent_excluded <- (n_original - n_final)/n_original; percent_excluded
d_raw$age <- as.numeric(as.character(d_raw$age)); mean(d_raw$age, na.rm = TRUE)
count_gender_1 <- sum(d_raw$gender == 1, na.rm = TRUE); count_gender_1
## define new data frame to extract pre-processed data into:
d <- array(dim=c(n_final, 3))
colnames(d) <- c('cond_n', 'capability', 'trust')
d <- as.data.frame(d, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV:
for(i in 1:dim(d_raw)[1]) {
curr <- d_raw[i,14:25][!is.na(d_raw[i,14:25])] # for a given row, get only the non-NA values
d[i,2:3] <- as.numeric(curr[curr!= ""])[1:2] # and only the non-empty values
cond_ns <- names(d_raw[i,14:25])[which(d_raw[i,14:25] != "")]
d[i,1] <- strsplit(cond_ns[[1]], "_")[[1]][1]
}
d <- cbind(d, d_raw[,26:34])
sum(d$cond_n == 'Adjacent')
sum(d$cond_n == 'Present')
d$AI_Familiarity_1 <- as.numeric(d$AI_Familiarity_1)
d$Visual_Familiarity_1 <- as.numeric(d$Visual_Familiarity_1)
## ================================================================================================================
##                                              FUNCTIONS
## ================================================================================================================
# Define the create_stars function
create_stars <- function(p_value) {
stars <- ''
if (p_value < 0.001) {
stars <- '***'
} else if (p_value >= 0.001 & p_value < 0.01) {
stars <- '**'
} else if (p_value >= 0.01 & p_value < 0.05) {
stars <- '*'
} else if (p_value >= 0.05) {
stars <- 'ns'
}
return(stars)
}
## ================================================================================================================
##                                              ANALYSES
## ================================================================================================================
### Capability ----
# Fit the ANOVA model
anova_model <- aov(capability ~ cond_n, data = d)
summary(anova_model)
tapply(d$capability, d$cond_n, mean)
tapply(d$capability, d$cond_n, sd)
# Present v Absent
present_v_absent <- t.test(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Absent']); present_v_absent
cohen.d(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Absent'])
p_v_a_stars <- create_stars(present_v_absent$p.value)
# Generate a vector of 50's that is the same length as Present data
midpoint_pc <- rep(50, length(d$cond_n=='Present'))
# Now you can compare Present data against the midpoint using a t-test
present_v_50 <- t.test(d$capability[d$cond_n=='Present'], midpoint_pc); present_v_50
# Generate a vector of 50's that is the same length as Absent data
midpoint_ac <- rep(50, length(d$cond_n=='Absent'))
# Now you can compare Absent data against the midpoint using a t-test
absent_v_50 <- t.test(d$capability[d$cond_n=='Absent'], midpoint_ac); absent_v_50
### Trust ----
# Fit the ANOVA model
anova_model <- aov(trust ~ cond_n, data = d)
summary(anova_model)
tapply(d$trust, d$cond_n, mean)
tapply(d$trust, d$cond_n, sd)
# Present v Absent
present_v_absent_t <- t.test(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Absent']); present_v_absent_t
cohen.d(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Absent'])
p_v_a_t_stars <- create_stars(present_v_absent_t$p.value)
# Now you can compare Present data against the midpoint using a t-test
present_v_50_t <- t.test(d$trust[d$cond_n=='Present'], midpoint_pc); present_v_50_t
# Now you can compare Absent data against the midpoint using a t-test
absent_v_50_t <- t.test(d$trust[d$cond_n=='Absent'], midpoint_ac); absent_v_50_t
# Define the variable names and titles
t_names <- c("Present", "Absent")
title_size <- 16
axis_size <- 10
# Create a function to generate the plot
plotter <- function(data, value_column, input_title, t_test_result, stars) {
y_var <- sym(value_column)
p1 <- ggplot(data, aes(x = factor(cond_n), y = !!y_var, fill = factor(cond_n))) +
geom_bar(stat = "summary", fun = mean, position = position_dodge(width = 0.9), color = "black", size = 0.4) +
geom_errorbar(stat = "summary", fun.data = mean_cl_boot, width = 0.2, position = position_dodge(width = 0.9)) +
geom_signif(comparisons = list(c("Present", "Absent")), y_position = 100, textsize = 3.3, test = "t.test", test.args = list(paired = TRUE), annotation = stars, step_increase = 10) +
theme_bw() +
theme(text = element_text(size = title_size),
panel.grid.major = element_line(color = "lightgrey"),
axis.text.x = element_text(size = axis_size),
axis.text.y = element_text(size = axis_size),
plot.title = element_text(size = title_size, hjust = 0.5),
legend.position = "none") +
scale_x_discrete(labels = t_names) +
xlab("") +
ylab("") +
ggtitle(input_title) +
annotate("text", x = 1.5, y = 95, label = stars, size = 5) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +
scale_fill_manual(values = c("darkgrey", "lightgrey")) +
scale_y_continuous(limits = c(NA, 100), breaks = seq(0, 100, by = 25), minor_breaks = seq(0, 100, by = 5))
return(p1)
}
# Create the left graph
p1 <- plotter(d, "trust", 'Trust', present_v_absent_t, p_v_a_t_stars)
# Create the right graph
p2 <- plotter(d, "capability", 'Capability', present_v_absent, p_v_a_stars)
# Create the figure with two plots
figure <- ggarrange(p1, p2, nrow = 1, ncol = 2, common.legend = FALSE, vjust = 1.0, hjust = 1.1)
# Add annotations to the figure
annotate_figure(figure, left = text_grob("Mean Rating", color = "black", face = "plain", size = 26, rot = 90),
bottom = text_grob("Annotation Condition", color = "black", face = "plain", size = 26, vjust = -.1))
## ================================================================================================================
##                                              END
## ================================================================================================================
# Define the variable names and titles
t_names <- c("Present", "Absent")
title_size <- 16
axis_size <- 10
# Create a function to generate the plot
plotter <- function(data, value_column, input_title, t_test_result, stars) {
y_var <- sym(value_column)
p1 <- ggplot(data, aes(x = factor(cond_n), y = !!y_var, fill = factor(cond_n))) +
geom_bar(stat = "summary", fun = mean, position = position_dodge(width = 0.9), color = "black", size = 0.4) +
geom_errorbar(stat = "summary", fun.data = mean_cl_boot, width = 0.2, position = position_dodge(width = 0.9)) +
geom_signif(comparisons = list(c("Present", "Absent")), y_position = 100, textsize = 3.3, test = "t.test", test.args = list(paired = TRUE), annotation = stars, step_increase = 10) +
theme_bw() +
theme(text = element_text(size = title_size),
panel.grid.major = element_line(color = "lightgrey"),
axis.text.x = element_text(size = axis_size),
axis.text.y = element_text(size = axis_size),
plot.title = element_text(size = title_size, hjust = 0.5),
legend.position = "none") +
scale_x_discrete(labels = t_names) +
xlab("") +
ylab("") +
ggtitle(input_title) +
annotate("text", x = 1.5, y = 95, label = stars, size = 5) +
geom_hline(yintercept = 50, linetype = "dotted", color = "black") +
scale_fill_manual(values = c("darkgrey", "lightgrey")) +
scale_y_continuous(limits = c(NA, 100), breaks = seq(0, 100, by = 25), minor_breaks = seq(0, 100, by = 5))
return(p1)
}
# Create the left graph
p1 <- plotter(d, "trust", 'Trust', present_v_absent_t, p_v_a_t_stars)
# Create the right graph
p2 <- plotter(d, "capability", 'Capability', present_v_absent, p_v_a_stars)
# Create the figure with two plots
figure <- ggarrange(p1, p2, nrow = 1, ncol = 2, common.legend = FALSE, vjust = 1.0, hjust = 1.1)
# Add annotations to the figure
annotate_figure(figure, left = text_grob("Mean Rating", color = "black", face = "plain", size = 26, rot = 90),
bottom = text_grob("Background Condition", color = "black", face = "plain", size = 26, vjust = -.1))

## ================================================================================================================
##                                DATA ANALYSIS | AV SCENARIOS | BETWEEN SUBJECTS
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'lsmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',       # get Cramer's V
'Hmisc',
'effsize',         # effect size
'reshape2',         # reshaping data
'rlang',
'rstatix',
'scales',
'tidyverse',
'mediation'
)
library("lmerTest")
library(dplyr)
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
# import data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d_raw <- read.csv('AI_Curse_Intervention_Numeric.csv')
## number of participants BEFORE exclusions:
n_original <- dim(d_raw)[1] # extracting number of rows only, not columns
n_original
## perform attention exclusions:
d_raw <- subset(d_raw, ( d_raw$attn_1 == 1 & d_raw$attn_2 == 2))
dim(d_raw) # number of participants should decrease after comprehension exclusions
## get number of participants AFTER exclusions:
n_final <- dim(d_raw)[1]; n_final # extracting number of rows only, not columns
percent_excluded <- (n_original - n_final)/n_original; percent_excluded
d_raw$age <- as.numeric(as.character(d_raw$age)); mean(d_raw$age, na.rm = TRUE)
count_gender_1 <- sum(d_raw$gender == 1, na.rm = TRUE); count_gender_1
## define new data frame to extract pre-processed data into:
d <- array(dim=c(n_final, 3))
colnames(d) <- c('cond_n', 'capability', 'trust')
d <- as.data.frame(d, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV:
for(i in 1:dim(d_raw)[1]) {
curr <- d_raw[i,14:25][!is.na(d_raw[i,14:25])] # for a given row, get only the non-NA values
d[i,2:3] <- as.numeric(curr[curr!= ""])[1:2] # and only the non-empty values
cond_ns <- names(d_raw[i,14:25])[which(d_raw[i,14:25] != "")]
d[i,1] <- strsplit(cond_ns[[1]], "_")[[1]][1]
}
d <- cbind(d, d_raw[,26:34])
sum(d$cond_n == 'Adjacent')
sum(d$cond_n == 'Present')
sum(d$cond_n == 'Absent')
sum(d$cond_n == 'Faded')
d$AI_Familiarity_1 <- as.numeric(d$AI_Familiarity_1)
d$Visual_Familiarity_1 <- as.numeric(d$Visual_Familiarity_1)
## ================================================================================================================
##                                              FUNCTIONS
## ================================================================================================================
# Define the create_stars function
create_stars <- function(p_value) {
stars <- ''
if (p_value < 0.001) {
stars <- '***'
} else if (p_value >= 0.001 & p_value < 0.01) {
stars <- '**'
} else if (p_value >= 0.01 & p_value < 0.05) {
stars <- '*'
} else if (p_value >= 0.05) {
stars <- 'ns'
}
return(stars)
}
## ================================================================================================================
##                                              ANALYSES
## ================================================================================================================
### Capability ----
# Fit the ANOVA model
anova_model <- aov(capability ~ cond_n, data = d)
summary(anova_model)
tapply(d$capability, d$cond_n, mean)
tapply(d$capability, d$cond_n, sd)
# Absent v Present
absent_v_present <- t.test(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Present']); absent_v_present
cohen.d(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Present'])
a_v_p_stars <- create_stars(absent_v_present$p.value)
# Absent v Adjacent
absent_v_adjacent <- t.test(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Adjacent']); absent_v_adjacent
cohen.d(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Adjacent'])
a_v_adj_stars <- create_stars(absent_v_adjacent$p.value)
# Present v Adjacent
present_v_adjacent <- t.test(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Adjacent']); present_v_adjacent
cohen.d(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Adjacent'])
p_v_adj_stars <- create_stars(present_v_adjacent$p.value)
# Absent v Faded
absent_v_faded <- t.test(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Faded']); absent_v_faded
cohen.d(d$capability[d$cond_n=='Absent'], d$capability[d$cond_n=='Faded'])
a_v_fade_stars <- create_stars(absent_v_faded$p.value)
# Present v Faded
present_v_faded <- t.test(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Faded']); present_v_faded
cohen.d(d$capability[d$cond_n=='Present'], d$capability[d$cond_n=='Faded'])
p_v_fade_stars <- create_stars(present_v_faded$p.value)
# Generate a vector of 50's that is the same length as Present data
midpoint_pc <- rep(50, length(d$cond_n=='Present'))
# Now you can compare Present data against the midpoint using a t-test
present_v_50 <- t.test(d$capability[d$cond_n=='Present'], midpoint_pc); present_v_50
# Generate a vector of 50's that is the same length as Adjacent data
midpoint_bc <- rep(50, length(d$cond_n=='Adjacent'))
# Now you can compare Adjacent data against the midpoint using a t-test
base_v_50 <- t.test(d$capability[d$cond_n=='Adjacent'], midpoint_bc); base_v_50
# Generate a vector of 50's that is the same length as Absent data
midpoint_ac <- rep(50, length(d$cond_n=='Absent'))
# Now you can compare Absent data against the midpoint using a t-test
absent_v_50 <- t.test(d$capability[d$cond_n=='Absent'], midpoint_ac); absent_v_50
# Generate a vector of 50's that is the same length as Faded data
midpoint_fc <- rep(50, length(d$cond_n=='Faded'))
# Now you can compare Faded data against the midpoint using a t-test
faded_v_50 <- t.test(d$capability[d$cond_n=='Faded'], midpoint_ac); faded_v_50
### Trust ----
# Fit the ANOVA model
anova_model <- aov(trust ~ cond_n, data = d)
summary(anova_model)
tapply(d$trust, d$cond_n, mean)
tapply(d$trust, d$cond_n, sd)
# Absent v Present
absent_v_present_t <- t.test(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Present']); absent_v_present_t
cohen.d(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Present'])
a_v_p_t_stars <- create_stars(absent_v_present_t$p.value)
# Absent v Adjacent
absent_v_adjacent_t <- t.test(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Adjacent']); absent_v_adjacent_t
cohen.d(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Adjacent'])
a_v_adj_t_stars <- create_stars(absent_v_adjacent_t$p.value)
# Present v Adjacent
present_v_adjacent_t <- t.test(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Adjacent']); present_v_adjacent_t
cohen.d(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Adjacent'])
p_v_adj_t_stars <- create_stars(present_v_adjacent_t$p.value)
# Absent v Faded
absent_v_faded_t <- t.test(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Faded']); absent_v_faded_t
cohen.d(d$trust[d$cond_n=='Absent'], d$trust[d$cond_n=='Faded'])
a_v_fade_t_stars <- create_stars(absent_v_faded_t$p.value)
# Present v Faded
present_v_faded_t <- t.test(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Faded']); present_v_faded_t
cohen.d(d$trust[d$cond_n=='Present'], d$trust[d$cond_n=='Faded'])
p_v_fade_t_stars <- create_stars(present_v_faded_t$p.value)
# Now you can compare Present data against the midpoint using a t-test
present_v_50_t <- t.test(d$trust[d$cond_n=='Present'], midpoint_pc); present_v_50_t
# Now you can compare Adjacent data against the midpoint using a t-test
base_v_50_t <- t.test(d$trust[d$cond_n=='Adjacent'], midpoint_bc); base_v_50_t
# Now you can compare Absent data against the midpoint using a t-test
absent_v_50_t <- t.test(d$trust[d$cond_n=='Absent'], midpoint_ac); absent_v_50_t
# Now you can compare Faded data against the midpoint using a t-test
faded_v_50_t <- t.test(d$trust[d$cond_n=='Faded'], midpoint_fc); faded_v_50_t
## ================================================================================================================
##                                              MEDIATION
## ================================================================================================================
# Subset data for Mediation Analysis  (Faded, Adjacent, and Present conditions)
d$Absent0 <- ifelse(d$cond_n=='Absent', 0,
ifelse(d$cond_n=='Present', 1,
ifelse(d$cond_n=='Faded', 2,
ifelse(d$cond_n=='Adjacent', 3, NA))))
# Mediation Analysis
source("./process.R")
process(data = d, y = "trust", x = "Absent0",
m = "capability", model = 4, effsize = 1, mcx = 1, total = 1, stand = 1,
contrast = 1, boot = 10000, modelbt = 1, seed = 654321)
process(data = d, y = "trust", x = "Absent0",
m =c("capability"), w =c("AI_Familiarity_1"), model = 7, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
process(data = d, y = "trust", x = "Absent0",
m =c("capability"), w =c("Visual_Familiarity_1"), model = 7, effsize = 1, total = 1, stand = 1,
contrast =1, boot = 10000 , modelbt = 1, seed = 654321)
## ================================================================================================================
##                                              PLOT
## ================================================================================================================
# Define the variable names and titles
t_names <- c("Absent","Adjacent","Faded", "Present")
title_size <- 16
axis_size <- 10
plotter <- function(data, value_column, input_title) {
p <- ggplot(data, aes_string(x = "cond_n", y = value_column, fill = "cond_n")) +
geom_bar(stat = "summary", fun = mean, position = position_dodge(width = 0.9), color = "black", size = 0.4) +
geom_errorbar(stat = "summary", fun.data = "mean_cl_boot", width = 0.2, position = position_dodge(width = 0.9)) +
scale_fill_manual(values = c("darkgrey", "lightgrey", "white", "grey")) +
labs(title = input_title, x = "", y = "") +
theme_bw() +
theme(text = element_text(size = title_size),
axis.text.x = element_text(size = axis_size),
axis.text.y = element_text(size = axis_size),
plot.title = element_text(size = title_size, hjust = 0.5),
legend.position = "none") +
geom_hline(yintercept = 50, linetype = "dotted") + # Add dotted line at y = 50
scale_y_continuous(limits = c(0, 100)) # Set y-axis to go from 0 to 100
return(p)
}
# Create the plots using the original data
p1 <- plotter(d, "trust", 'Trust')
p2 <- plotter(d, "capability", 'Capability')
# Create the figure with two plots
figure <- ggarrange(p1, p2, nrow = 1, ncol = 2, vjust = 1.0, hjust = 1.1)
# Add annotations to the figure
figure <- ggarrange(p1, p2, nrow = 1, ncol = 2, vjust = 1.0, hjust = 1.1)
annotate_figure(figure, left = text_grob("Mean Rating", color = "black", face = "plain", size = 26, rot = 90),
bottom = text_grob("Background Condition", color = "black", face = "plain", size = 26, vjust = -.1))
## ================================================================================================================
##                                              END
## ================================================================================================================

## ================================================================================================================
##                                DATA ANALYSIS | AV SCENARIOS | BETWEEN SUBJECTS
## ================================================================================================================
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
## install packages
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2',         # plotting
'ggsignif',        # plotting significance bars
'lme4',            # functions for fitting linear regression models
'ggforce',         # make ggplot even fancier
'ggpubr',          # arrange plots in a grid, if needed
'ltm',             # probably not using..
'tidyr',           # tools for cleaning messy data
'stringr',         # perform string substitutions easily
'assertthat',      # allows me to check whether a variable is a string, with is.string
'lsmeans',         # contrast analysis for regression models
'stats',           # use function to adjust for multiple comparisons
'filesstrings',    # create and move files
'simr',            # power analysis for mixed models
'compute.es',      # effect size package
'effsize',         # another effect size package
'pwr',             # package for power calculation
'nlme',            # get p values for mixed effect model
'DescTools',       # get Cramer's V
'Hmisc',
'effsize',         # effect size
'reshape2',         # reshaping data
'rlang',
'rstatix',
'scales',
'tidyverse',
'mediation'
)
library("lmerTest")
library(dplyr)
library(rlang)
## ================================================================================================================
##                                                  PRE-PROCESSING
## ================================================================================================================
# import data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
d_raw <- read.csv('AI_Curse_Unannotated_vs_Annotated.csv')
## number of participants BEFORE exclusions:
n_original <- dim(d_raw)[1] # extracting number of rows only, not columns
n_original
## perform attention exclusions:
d_raw <- subset(d_raw, ( d_raw$attn_1 == 1 & d_raw$attn_2 == 2 & d_raw$comp_images == 1))
# Filter the data according to the comprehension check
d_raw <- d_raw %>%
filter(
(Annotated_Why != "" & comp_pedestrian == 2) |
(Unannotat_Why != "" & comp_pedestrian == 1)
)
dim(d_raw) # number of participants should decrease after comprehension exclusions
## get number of participants AFTER exclusions:
n_final <- dim(d_raw)[1]; n_final # extracting number of rows only, not columns
percent_excluded <- (n_original - n_final)/n_original; percent_excluded
d_raw$age <- as.numeric(as.character(d_raw$age)); mean(d_raw$age, na.rm = TRUE)
count_gender_1 <- sum(d_raw$gender == 1, na.rm = TRUE); count_gender_1
## define new data frame to extract pre-processed data into:
d <- array(dim=c(n_final, 3))
colnames(d) <- c('cond_n', 'capability', 'trust')
d <- as.data.frame(d, stringsAsFactors=FALSE)
## extract good data from the middle part of raw data in AV:
for(i in 1:dim(d_raw)[1]) {
curr <- d_raw[i,14:25][!is.na(d_raw[i,14:25])] # for a given row, get only the non-NA values
d[i,2:3] <- as.numeric(curr[curr!= ""])[1:2] # and only the non-empty values
cond_ns <- names(d_raw[i,14:25])[which(d_raw[i,14:25] != "")]
d[i,1] <- strsplit(cond_ns[[1]], "_")[[1]][1]
}
d <- cbind(d, d_raw[,21:29])
sum(d$cond_n == 'Annotated')
sum(d$cond_n == 'Unannotated')
d$AI_Familiarity_1 <- as.numeric(d$AI_Familiarity_1)
d$Visual_Familiarity_1 <- as.numeric(d$Visual_Familiarity_1)
## ================================================================================================================
##                                              FUNCTIONS
## ================================================================================================================
# Define the create_stars function
create_stars <- function(p_value) {
stars <- ''
if (p_value < 0.001) {
stars <- '***'
} else if (p_value >= 0.001 & p_value < 0.01) {
stars <- '**'
} else if (p_value >= 0.01 & p_value < 0.05) {
stars <- '*'
} else if (p_value >= 0.05) {
stars <- 'ns'
}
return(stars)
}
## ================================================================================================================
##                                              ANALYSES
## ================================================================================================================
### Capability ----
# Fit the ANOVA model
anova_model <- aov(capability ~ cond_n, data = d)
summary(anova_model)
tapply(d$capability, d$cond_n, mean)
tapply(d$capability, d$cond_n, sd)
# Annotated v Unannotated
annotated_v_unannotated <- t.test(d$capability[d$cond_n=='Annotated'], d$capability[d$cond_n=='Unannotated']); annotated_v_unannotated
cohen.d(d$capability[d$cond_n=='Annotated'], d$capability[d$cond_n=='Unannotated'])
a_v_u_stars <- create_stars(annotated_v_unannotated$p.value)
# Generate a vector of 50's that is the same length as Annotated data
midpoint_pc <- rep(50, length(d$cond_n=='Annotated'))
# Now you can compare Annotated data against the midpoint using a t-test
annotated_v_50 <- t.test(d$capability[d$cond_n=='Annotated'], midpoint_pc); annotated_v_50
# Generate a vector of 50's that is the same length as Annotated data
midpoint_bc <- rep(50, length(d$cond_n=='Unannotated'))
# Now you can compare Unannotated data against the midpoint using a t-test
unannotated_v_50 <- t.test(d$capability[d$cond_n=='Unannotated'], midpoint_bc); unannotated_v_50
### Trust ----
# Fit the ANOVA model
anova_model <- aov(trust ~ cond_n, data = d)
summary(anova_model)
tapply(d$trust, d$cond_n, mean)
tapply(d$trust, d$cond_n, sd)
# Baseline v Present
annotated_v_unannotated_t <- t.test(d$trust[d$cond_n=='Annotated'], d$trust[d$cond_n=='Unannotated']); annotated_v_unannotated_t
cohen.d(d$trust[d$cond_n=='Annotated'], d$trust[d$cond_n=='Unannotated'])
a_v_u_t_stars <- create_stars(annotated_v_unannotated_t$p.value)
# Now you can compare Annotated data against the midpoint using a t-test
annotated_v_50_t <- t.test(d$trust[d$cond_n=='Annotated'], midpoint_pc); annotated_v_50_t
# Now you can compare your Unannotated data against the midpoint using a t-test
unannotated_v_50_t <- t.test(d$trust[d$cond_n=='Unannotated'], midpoint_bc); unannotated_v_50_t
