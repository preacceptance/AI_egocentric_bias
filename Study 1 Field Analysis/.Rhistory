# Clear workspace and set options
rm(list = ls())
options(download.file.method="libcurl")
# Load necessary libraries
library(readxl)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  # Set working directory to current directory
analyze_sheet <- function(sheet_name) {
data <- read_excel("data_field_analysis.xlsx", sheet = sheet_name)
# Calculate average and standard deviation of "How many clicks?"
avg_clicks <- mean(data$`How many clicks?`, na.rm = TRUE)
sd_clicks <- sd(data$`How many clicks?`, na.rm = TRUE)
# Function to calculate count and percentage of "1"s in a column
count_and_percentage <- function(column_name) {
count_ones <- sum(data[[column_name]] == 1, na.rm = TRUE)
total_entries <- sum(!is.na(data[[column_name]]))
percentage_ones <- (count_ones / total_entries) * 100
return(list(count = count_ones, percentage = percentage_ones))
}
# Calculate counts and percentages for each specified column
columns_to_analyze <- c("Baseline", "Present Background", "Adjacent",
"Absent", "Faded", "None", "Curse?", "Other?",
"Does explanation clarify what software can/cannot see?")
results <- lapply(columns_to_analyze, count_and_percentage)
names(results) <- columns_to_analyze
# Compile results into a list
result_list <- list(
sheet = sheet_name,
average_clicks = avg_clicks,
sd_clicks = sd_clicks,
counts_and_percentages = results
)
return(result_list)
}
# Analyze each sheet and store the results, including the "Totals" sheet
sheet_names <- c("AVs", "Security Cams", "Agriculture", "Retail", "Aerospace and Defense", "Medical", "Totals")
results <- lapply(sheet_names, analyze_sheet)
# Print results
print(results)
table_data <- do.call(rbind, lapply(results, function(result) {
data.frame(
Sheet = result$sheet,
Average_Clicks = result$average_clicks,
SD_Clicks = result$sd_clicks,
Baseline_Count = result$counts_and_percentages$Baseline$count,
Baseline_Percentage = result$counts_and_percentages$Baseline$percentage,
Present_Background_Count = result$counts_and_percentages$`Present Background`$count,
Present_Background_Percentage = result$counts_and_percentages$`Present Background`$percentage,
Adjacent_Count = result$counts_and_percentages$Adjacent$count,
Adjacent_Percentage = result$counts_and_percentages$Adjacent$percentage,
Absent_Count = result$counts_and_percentages$Absent$count,
Absent_Percentage = result$counts_and_percentages$Absent$percentage,
Faded_Count = result$counts_and_percentages$Faded$count,
Faded_Percentage = result$counts_and_percentages$Faded$percentage,
None_Count = result$counts_and_percentages$None$count,
None_Percentage = result$counts_and_percentages$None$percentage,
Other_Count = result$counts_and_percentages$`Other?`$count,
Other_Percentage = result$counts_and_percentages$`Other?`$percentage,
Curse_Count = result$counts_and_percentages$`Curse?`$count,
Curse_Percentage = result$counts_and_percentages$`Curse?`$percentage,
Explanation_Count = result$counts_and_percentages$`Does explanation clarify what software can/cannot see?`$count,
Explanation_Percentage = result$counts_and_percentages$`Does explanation clarify what software can/cannot see?`$percentage
)
}))
percentage_columns <- c("Baseline_Percentage", "Present_Background_Percentage", "Adjacent_Percentage",
"Absent_Percentage", "Faded_Percentage", "None_Percentage",
"Other_Percentage", "Curse_Percentage", "Explanation_Percentage")
# Exclude the "Totals" sheet from SD calculation
table_data_no_totals <- table_data[table_data$Sheet != "Totals", ]
sd_percentages <- sapply(percentage_columns, function(col) {
sd(table_data_no_totals[[col]], na.rm = TRUE)
})
# Add SDs to the table data
sd_table <- data.frame(Category = gsub("_Percentage", "", percentage_columns), SD_Percentage = sd_percentages)
print(sd_table)
results
result$counts_and_percentages$Baseline$count
result$sheet
results$sheet
table_data
table_data_no_totals <- table_data[table_data$Sheet != "Totals", ]
sd_percentages <- sapply(percentage_columns, function(col) {
sd(table_data_no_totals[[col]], na.rm = TRUE)
})
table_data
# Add SDs to the table data
sd_table <- data.frame(Category = gsub("_Percentage", "", percentage_columns), SD_Percentage = sd_percentages)
print(sd_table)
calculate_curse_1_percentage <- function(df) {
total_entries <- sum(!is.na(df$`Curse?`))  # Total non-NA entries
curse_1_count <- sum(df$`Curse?` == 1, na.rm = TRUE)
curse_1_percentage <- (curse_1_count / total_entries) * 100
return(curse_1_percentage)
}
# Sheet names to analyze (excluding "ReadMe" and "Totals")
sheet_names <- c("AVs", "Security Cams", "Agriculture", "Retail", "Aerospace and Defense", "Medical")
# Clear workspace and set options
rm(list = ls())
options(download.file.method="libcurl")
# Load necessary libraries
library(readxl)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  # Set working directory to current directory
analyze_sheet <- function(sheet_name) {
data <- read_excel("Study_4_correctedterms.xlsx", sheet = sheet_name)
# Calculate average and standard deviation of "How many clicks?"
avg_clicks <- mean(data$`How many clicks?`, na.rm = TRUE)
sd_clicks <- sd(data$`How many clicks?`, na.rm = TRUE)
# Function to calculate count and percentage of "1"s in a column
count_and_percentage <- function(column_name) {
count_ones <- sum(data[[column_name]] == 1, na.rm = TRUE)
total_entries <- sum(!is.na(data[[column_name]]))
percentage_ones <- (count_ones / total_entries) * 100
return(list(count = count_ones, percentage = percentage_ones))
}
# Calculate counts and percentages for each specified column
columns_to_analyze <- c("Baseline", "Image_Annotated", "Adjacent",
"Annotation_Only", "Faded", "Curse?", "Other",
"Verbal_Cue")
results <- lapply(columns_to_analyze, count_and_percentage)
names(results) <- columns_to_analyze
# Compile results into a list
result_list <- list(
sheet = sheet_name,
average_clicks = avg_clicks,
sd_clicks = sd_clicks,
counts_and_percentages = results
)
return(result_list)
}
# Analyze each sheet and store the results, including the "Totals" sheet
sheet_names <- c("AVs", "Security Cams", "Agriculture", "Retail", "Aerospace and Defense", "Medical", "Totals")
results <- lapply(sheet_names, analyze_sheet)
# Print results
print(results)
# Prepare data for table display
table_data <- do.call(rbind, lapply(results, function(result) {
data.frame(
Sheet = result$sheet,
Average_Clicks = result$average_clicks,
SD_Clicks = result$sd_clicks,
Baseline_Count = result$counts_and_percentages$Baseline$count,
Baseline_Percentage = result$counts_and_percentages$Baseline$percentage,
Image_Annotated_Count = result$counts_and_percentages$`Image_Annotated`$count,
Image_Annotated_Percentage = result$counts_and_percentages$`Image_Annotated`$percentage,
Adjacent_Count = result$counts_and_percentages$Adjacent$count,
Adjacent_Percentage = result$counts_and_percentages$Adjacent$percentage,
Annotation_Only_Count = result$counts_and_percentages$Annotation_Only$count,
Annotation_Only_Percentage = result$counts_and_percentages$Annotation_Only$percentage,
Faded_Count = result$counts_and_percentages$Faded$count,
Faded_Percentage = result$counts_and_percentages$Faded$percentage,
Other_Count = result$counts_and_percentages$`Other`$count,
Other_Percentage = result$counts_and_percentages$`Other`$percentage,
Curse_Count = result$counts_and_percentages$`Curse?`$count,
Curse_Percentage = result$counts_and_percentages$`Curse?`$percentage,
Verbal_Cue_Count = result$counts_and_percentages$`Verbal_Cue`$count,
Verbal_Cue_Percentage = result$counts_and_percentages$`Verbal_Cue`$percentage
)
}))
# Calculate standard deviations of percentages across sheets for each category, excluding "Totals"
percentage_columns <- c("Baseline_Percentage", "Image_Annotated_Percentage", "Adjacent_Percentage",
"Annotation_Only_Percentage", "Faded_Percentage",
"Other_Percentage", "Curse_Percentage", "Verbal_Cue_Percentage")
# Exclude the "Totals" sheet from SD calculation
table_data_no_totals <- table_data[table_data$Sheet != "Totals", ]
sd_percentages <- sapply(percentage_columns, function(col) {
sd(table_data_no_totals[[col]], na.rm = TRUE)
})
# Add SDs to the table data
sd_table <- data.frame(Category = gsub("_Percentage", "", percentage_columns), SD_Percentage = sd_percentages)
print(sd_table)
table_data
